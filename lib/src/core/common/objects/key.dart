import 'package:meta/meta.dart';
import 'package:rad/src/core/common/constants.dart';
import 'package:rad/src/include/foundation/hash_codes.dart';
import 'package:rad/src/widgets/abstract/widget.dart';

/// A [Key] is an identifier for [Widget]s.
///
/// Most of the time, framework takes care of generating keys for you.
///
@immutable
class Key {
  final String _value;

  /// Whether key requires computation.
  ///
  final bool requiresComputation;

  /// Value of key that was used to while creating key.
  ///
  String get value => _value;

  /// Whether value of key is using system reserved prefix.
  ///
  /// Reserved prefix is added to keys that are generated by the framework.
  ///
  bool get hasSystemPrefix => _value.startsWith(Constants.contextGenKeyPrefix);

  /// Simplest way to create a key.
  ///
  const Key(this._value) : requiresComputation = true;

  /// Returns a super global key.
  ///
  /// Generator must be responsible for providing a value that's unique within
  /// entire document(i.e withing multiple app instances).
  ///
  const Key.global(this._value) : requiresComputation = false;

  @override
  operator ==(Object other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }

    if (other is Key && other.requiresComputation != requiresComputation) {
      return false;
    }

    return other is Key && other.value == value;
  }

  @override
  get hashCode => hashValues(runtimeType, value);

  @override
  toString() => value;
}
