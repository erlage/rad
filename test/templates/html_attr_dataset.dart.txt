test('should set data attributes', () {
    app!.framework.buildChildren(
        widgets: [
            __WidgetClass__(
            key: GlobalKey('some-global-key'),
                dataAttributes: {
                    'something': 'something okay',
                    'another': 'another okay',
                },
            ),
        ],
        parentContext: RT_TestBed.rootContext,
    );

    var element1 = RT_TestBed.rootElement.childNodes[0] as HtmlElement;

    expect(element1.dataset['something'], equals('something okay'));
    expect(element1.dataset['another'], equals('another okay'));
}__Skip__);


test('should remove obsolute and add new data attributes on update', () {
    app!.framework.buildChildren(
        widgets: [
            __WidgetClass__(
            key: GlobalKey('some-global-key'),
                dataAttributes: {
                    'something': 'something okay',
                },
            ),
        ],
        parentContext: RT_TestBed.rootContext,
    );

    app!.framework.updateChildren(
        widgets: [
            __WidgetClass__(
                key: GlobalKey('some-global-key'),
                dataAttributes: {
                    'something-new': 'something new',
                },
            ),
        ],
        updateType: UpdateType.undefined,
        parentContext: RT_TestBed.rootContext,
    );

    var element1 = RT_TestBed.rootElement.childNodes[0] as HtmlElement;

    expect(element1.dataset['something'], equals(null));
    expect(element1.dataset['something-new'], equals('something new'));
}__Skip__);

test('should not override system reserved data attributes on build', () {
    app!.framework.buildChildren(
        widgets: [
            __WidgetClass__(
                key: GlobalKey('some-global-key'),
                dataAttributes: {
                    'something': 'something okay',
                    Constants.attrWidgetType: "must ignore",
                    Constants.attrRuntimeType: "must ignore",
                    Constants.attrStateType: "must ignore",
                    Constants.attrRouteName: "must ignore",
                    Constants.attrRoutePath: "must ignore",
                },
            ),
        ],
        parentContext: RT_TestBed.rootContext,
    );

    var element1 = RT_TestBed.rootElement.childNodes[0] as HtmlElement;

    expect(element1.dataset['something'], equals('something okay'));

    expect(element1.dataset[Constants.attrWidgetType], equals("$__WidgetClass__"));
    expect(element1.dataset[Constants.attrRuntimeType], equals("$__WidgetClass__"));
    expect(element1.dataset[Constants.attrStateType], equals(null));
    expect(element1.dataset[Constants.attrRouteName], equals(null));
    expect(element1.dataset[Constants.attrRoutePath], equals(null));
}__Skip__);

test('should not remove system reserved data attributes on update', () {
    app!.framework.buildChildren(
        widgets: [
            __WidgetClass__(
            key: GlobalKey('some-global-key'),
                dataAttributes: {
                    'something': 'something okay',
                    Constants.attrWidgetType: "must ignore",
                    Constants.attrRuntimeType: "must ignore",
                    Constants.attrStateType: "must ignore",
                    Constants.attrRouteName: "must ignore",
                    Constants.attrRoutePath: "must ignore",
                },
            ),
        ],
        parentContext: RT_TestBed.rootContext,
    );

    app!.framework.updateChildren(
        widgets: [
            __WidgetClass__(
                key: GlobalKey('some-global-key'),
                dataAttributes: {
                    'something': 'something new',
                    'something-diff': 'something diff',
                    Constants.attrWidgetType: "must ignore",
                    Constants.attrRuntimeType: "must ignore",
                    Constants.attrStateType: "must ignore",
                    Constants.attrRouteName: "must ignore",
                    Constants.attrRoutePath: "must ignore",
                },
            ),
        ],
        updateType: UpdateType.undefined,
        parentContext: RT_TestBed.rootContext,
    );

    var element1 = RT_TestBed.rootElement.childNodes[0] as HtmlElement;

    expect(element1.dataset['something'], equals('something new'));
    expect(element1.dataset['something-diff'], equals('something diff'));
    expect(element1.dataset[Constants.attrWidgetType], equals("$__WidgetClass__"));
    expect(element1.dataset[Constants.attrRuntimeType], equals("$__WidgetClass__"));
    expect(element1.dataset[Constants.attrStateType], equals(null));
    expect(element1.dataset[Constants.attrRouteName], equals(null));
    expect(element1.dataset[Constants.attrRoutePath], equals(null));
}__Skip__);