test('should set onclick event listener', () {
  var testStack = RT_TestStack();

  app!.framework.buildChildren(
    widgets: [
      __WidgetClass__(
        key: GlobalKey('some-global-key'),
        onClickEventListener: (event) => testStack.push('clicked'),
      ),
    ],
    parentContext: RT_TestBed.rootContext,
  );

  var element1 = RT_TestBed.rootElement.childNodes[0] as HtmlElement;

  element1
    ..click()
    ..click();

  expect(testStack.popFromStart(), equals('clicked'));
  expect(testStack.popFromStart(), equals('clicked'));
  expect(testStack.canPop(), equals(false));
}__Skip__);

test('should set onclick nested event listeners', () {
  var testStack = RT_TestStack();

  app!.framework.buildChildren(
    widgets: [
      __WidgetClass__(
        key: GlobalKey('parent'),
        onClickEventListener: (event) {
          testStack.push('parent clicked');
        },
        children: [
          __WidgetClass__(
            key: GlobalKey('child'),
            onClickEventListener: (event) {
              testStack.push('child clicked');
            },
          ),
        ],
      )
    ],
    parentContext: RT_TestBed.rootContext,
  );

  var parent = app!.services.walker
      .getWidgetObjectUsingKey(
        'parent',
      )!
      .element;

  var child = app!.services.walker
      .getWidgetObjectUsingKey(
        'child',
      )!
      .element;

  child.click();
  parent.click();

  expect(testStack.popFromStart(), equals('child clicked'));
  expect(testStack.popFromStart(), equals('parent clicked'));
  expect(testStack.popFromStart(), equals('parent clicked'));
  expect(testStack.canPop(), equals(false));
}__Skip__);

test('should set onclick nested event listeners: bubbling test', () {
  var testStack = RT_TestStack();

  app!.framework.buildChildren(
    widgets: [
      __WidgetClass__(
        key: GlobalKey('parent'),
        onClickEventListener: (event) {
          testStack.push('parent clicked');
        },
        children: [
          __WidgetClass__(
            key: GlobalKey('child'),
            onClickEventListener: (event) {
              event.stopPropagation();

              testStack.push('child clicked');
            },
          ),
        ],
      )
    ],
    parentContext: RT_TestBed.rootContext,
  );

  var parent = app!.services.walker
      .getWidgetObjectUsingKey(
        'parent',
      )!
      .element;

  var child = app!.services.walker
      .getWidgetObjectUsingKey(
        'child',
      )!
      .element;

  child.click();
  parent.click();

  expect(testStack.popFromStart(), equals('child clicked'));
  expect(testStack.popFromStart(), equals('parent clicked'));
  expect(testStack.canPop(), equals(false));
}__Skip__);