test('should set id', () async {
  await app!.buildChildren(
    widgets: [
      __WidgetClass__(key: Key('some-key'), id: 'some-id'),
      __WidgetClass__(key: LocalKey('some-local-key'), id: 'some-local-id'),
      __WidgetClass__(key: GlobalKey('some-global-key'), id: 'some-global-id'),
    ],
    parentContext: RT_TestBed.rootContext,
  );

  var element1 = app!.elementByKey('some-key', RT_TestBed.rootContext);
  var element2 = app!.elementByLocalKey('some-local-key');
  var element3 = app!.elementByGlobalKey('some-global-key');

  expect(element1.id, endsWith('some-id'));
  expect(element2.id, endsWith('some-local-id'));
  expect(element3.id, equals('some-global-id'));
}__Skip__);

test('should reset and update id', () async {
  await app!.buildChildren(
    widgets: [
      __WidgetClass__(key: Key('some-key'), id: 'some-id'),
      __WidgetClass__(key: LocalKey('some-local-key'), id: 'some-local-id'),
      __WidgetClass__(key: GlobalKey('some-global-key'), id: 'some-global-id'),
    ],
    parentContext: app!.appContext,
  );

  var element1 = app!.elementByKey('some-key', app!.appContext);
  var element2 = app!.elementByLocalKey('some-local-key');
  var element3 = app!.elementByGlobalKey('some-global-key');

  expect(element1.id, endsWith('some-id'));
  expect(element2.id, endsWith('some-local-id'));
  expect(element3.id, equals('some-global-id'));

  await app!.updateChildren(
    widgets: [
      __WidgetClass__(
        key: Key('some-key'),
        id: 'some-updated-id',
      ),
      __WidgetClass__(
        key: LocalKey('some-local-key'),
        id: 'some-local-updated-id',
      ),
      __WidgetClass__(
        key: GlobalKey('some-global-key'),
        id: 'some-global-updated-id',
      ),
    ],
    updateType: UpdateType.undefined,
    parentContext: app!.appContext,
  );

  expect(element1.id, endsWith('some-updated-id'));
  expect(element2.id, endsWith('some-local-updated-id'));
  expect(element3.id, equals('some-global-updated-id'));
}__Skip__);

test('should set messy "id"', () async {
  await app!.buildChildren(
    widgets: [
      __WidgetClass__(
        key: Key('widget-1'),
        id: 'some id',
      ),
      __WidgetClass__(
        key: Key('widget-2'),
        id: 'some "messy" id',
      ),
      __WidgetClass__(
        key: Key('widget-3'),
        id: "some 'messy' id",
      ),
    ],
    parentContext: RT_TestBed.rootContext,
  );

  var element1 = RT_TestBed.rootElement.childNodes[0] as HtmlElement;
  var element2 = RT_TestBed.rootElement.childNodes[1] as HtmlElement;
  var element3 = RT_TestBed.rootElement.childNodes[2] as HtmlElement;

  expect(
    element1.getAttribute('id'),
    equals('some id'),
  );

  expect(
    element2.getAttribute('id'),
    equals('some "messy" id'),
  );

  expect(
    element3.getAttribute('id'),
    equals("some 'messy' id"),
  );
}__Skip__);
