import 'package:meta/meta.dart';

import 'package:rad/src/core/common/objects/build_context.dart';
import 'package:rad/src/core/services/services_registry.dart';
import 'package:rad/src/include/foundation/hash_codes.dart';
import 'package:rad/src/widgets/abstract/widget.dart';

/// A [Key] is an identifier for [Widget]s.
///
/// Keys must be unique amongst the [Widget]s with the same parent. By
/// contrast, [GlobalKey]s and [LocalKey]s must be unique in single app
/// instance where they are created.
///
@immutable
class Key {
  final String _value;

  /// Value of key that was used while creating the key.
  ///
  String get value => _value;

  /// Whether this key is generated by the framework.
  ///
  final bool isFrameworkGenerated;

  /// Simplest way to create a key.
  ///
  /// Keys must be unique amongst the [Widget]s with the same parent. By
  /// contrast, [GlobalKey]s and [LocalKey] must be unique within a single app
  /// instance(where they are created).
  ///
  const Key(this._value) : isFrameworkGenerated = false;

  /// Create a key with framework-generated flag on.
  ///
  const Key._generate(this._value) : isFrameworkGenerated = true;

  /// Return computed value of global key.
  ///
  String getComputedValue(BuildContext context) {
    if (ServicesRegistry.instance.getDebug(context).additionalChecks) {
      ServicesRegistry.instance.getDebug(context).exception(
            'Please use LocalKey or GlobalKey if you want to compute values',
          );
    }

    return "Computing key's value is not possible.";
  }

  @override
  operator ==(Object other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }

    return other is Key && other.value == value;
  }

  @override
  int get hashCode => hashValues(runtimeType, value);

  @override
  toString() => value;
}

/// A key that is unique within a single app instance.
///
class LocalKey extends Key {
  /// Creates a local key.
  ///
  /// Constructing code must be responsible for providing a value that's unique
  /// within entire app.
  ///
  const LocalKey(String value) : super(value);

  /// Return computed value of local key.
  ///
  @override
  String getComputedValue(BuildContext context) {
    var keyGenService = ServicesRegistry.instance.getKeyGen(context);

    return keyGenService.getGlobalKeyUsingKey(this, context).value;
  }
}

/// A key that is unique within a single app instance.
///
/// Global keys are different from local keys in the sense that their instance
/// is available in [BuildContext] while for [LocalKey]s and [Key]s, a new
/// [GlobalKey] is created which is then added to widget's [BuildContext].
///
/// This also means that global key's [value] is not computed i.e value provided
/// in constructor is directly used as widget's key. On the other hand, local
/// key's [value] is computed using the value that's provided in the constructor
/// and the parent context.
///
class GlobalKey extends Key {
  /// Creates a global key.
  ///
  /// Constructing code must be responsible for providing a value that's unique
  /// within entire app.
  ///
  const GlobalKey(String value) : super(value);

  /// Create a key with framework-generated flag on. This flag allow framework
  /// distinguish between framework generated and user provided keys during
  /// matching and updating widgets in the tree.
  ///
  const GlobalKey.generateForFramework(String value) : super._generate(value);

  /// Return computed value of global key.
  ///
  @override
  String getComputedValue(BuildContext context) => value;
}
